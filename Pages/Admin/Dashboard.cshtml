@page
@model SocialGenius.Pages.Admin.DashboardModel
@{
    ViewData["Title"] = "Dashboard Amministrazione";
}
@* Aggiungi il token anti-forgery nascosto per le richieste AJAX *@
<form id="antiForgeryForm">
    @Html.AntiForgeryToken()
</form>

<link rel="stylesheet" href="~/css/home.css" asp-append-version="true" />

<style>
    /* Stili per la dashboard admin */
    :root {
        --primary-color: #4361ee;
        --secondary-color: #3f37c9;
        --accent-color: #4895ef;
        --admin-primary: #7209b7;
        --admin-secondary: #560bad;
        --admin-accent: #480ca8;
        --success-color: #06d6a0;
        --warning-color: #ffd166;
        --danger-color: #ef476f;
        --text-color: #2b2d42;
        --light-color: #f8f9fa;
    }

    .admin-header {
        background: linear-gradient(145deg, var(--admin-primary), var(--admin-secondary));
        color: white;
        padding: 3rem 0;
        margin-bottom: 2rem;
        border-radius: 0 0 20px 20px;
        box-shadow: 0 5px 15px rgba(114, 9, 183, 0.3);
    }

    .admin-gradient-heading {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        color: white;
    }

    .admin-card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.07);
        transition: all 0.3s ease;
        height: 100%;
        overflow: hidden;
    }

    .user-table-container {
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.07);
        overflow: hidden;
    }

    .admin-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

        .admin-table th {
            background: linear-gradient(145deg, var(--admin-secondary), var(--admin-primary));
            color: white;
            padding: 1rem 1.5rem;
            font-weight: 600;
            text-align: left;
            border: none;
            position: sticky;
            top: 0;
        }

        .admin-table td {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid rgba(0,0,0,0.05);
            vertical-align: middle;
        }

        .admin-table tbody tr {
            transition: all 0.2s ease;
        }

            .admin-table tbody tr:hover {
                background-color: rgba(114, 9, 183, 0.03);
            }

    .user-role {
        display: inline-block;
        padding: 0.35rem 0.75rem;
        border-radius: 50px;
        font-size: 0.85rem;
        font-weight: 600;
    }

    .role-admin {
        background-color: rgba(114, 9, 183, 0.1);
        color: var(--admin-primary);
    }

    .role-premium {
        background-color: rgba(255, 193, 7, 0.1);
        color: #ffc107;
    }

    .role-user {
        background-color: rgba(72, 97, 238, 0.1);
        color: var(--primary-color);
    }

    .user-status {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }

    .status-active {
        background-color: var(--success-color);
    }

    .status-inactive {
        background-color: #adb5bd;
    }

    .btn-action {
        width: 36px;
        height: 36px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        margin-right: 5px;
        transition: all 0.2s ease;
    }

        .btn-action:hover {
            transform: translateY(-2px);
        }

    .search-filters {
        padding: 1.5rem;
        border-radius: 15px;
        background: white;
        box-shadow: 0 10px 30px rgba(0,0,0,0.05);
        margin-bottom: 2rem;
    }

    .form-control, .form-select {
        border-radius: 8px;
        padding: 0.6rem 1rem;
        border: 1px solid #e9ecef;
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--admin-primary);
            box-shadow: 0 0 0 0.25rem rgba(114, 9, 183, 0.25);
        }

    .btn-admin-primary {
        background: linear-gradient(45deg, var(--admin-primary), var(--admin-secondary));
        border: none;
        padding: 0.75rem 1.75rem;
        font-weight: 600;
        border-radius: 8px;
        color: white;
        transition: all 0.3s ease;
    }

        .btn-admin-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(114, 9, 183, 0.4);
        }

    .stats-card {
        padding: 1.5rem;
        border-radius: 15px;
        border: none;
        margin-bottom: 1.5rem;
        position: relative;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0,0,0,0.05);
    }

        .stats-card:before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
        }

    .stats-users:before {
        background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
    }

    .stats-premium:before {
        background: linear-gradient(90deg, #ffc107, #ff9800);
    }

    .stats-posts:before {
        background: linear-gradient(90deg, var(--success-color), #20c997);
    }

    .stats-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .stats-label {
        color: #6c757d;
        font-size: 1rem;
    }

    .stats-icon {
        position: absolute;
        right: 1.5rem;
        bottom: 1.5rem;
        font-size: 2.5rem;
        opacity: 0.15;
    }

    /* Animazioni per modal */
    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out;
        transform: scale(0.95);
    }

    .modal.show .modal-dialog {
        transform: scale(1);
    }

    .modal-content {
        border: none;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    .modal-header {
        background: linear-gradient(145deg, var(--admin-primary), var(--admin-secondary));
        color: white;
        border-radius: 15px 15px 0 0;
        border-bottom: none;
    }

    .modal-footer {
        border-top: 1px solid rgba(0,0,0,0.05);
    }

    /* Pagination styling */
    .pagination .page-item .page-link {
        border: none;
        color: var(--admin-primary);
        border-radius: 50%;
        margin: 0 3px;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
    }

    .pagination .page-item.active .page-link {
        background-color: var(--admin-primary);
        color: white;
    }

    .pagination .page-item .page-link:hover:not(.active) {
        background-color: rgba(114, 9, 183, 0.1);
    }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: #dee2e6;
        margin-bottom: 1.5rem;
    }

    /* Stile per tooltip */
    .tooltip-inner {
        background-color: var(--admin-primary);
        border-radius: 8px;
        padding: 0.5rem 1rem;
        box-shadow: 0 3px 10px rgba(0,0,0,0.2);
    }

    .bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow::before,
    .bs-tooltip-top .tooltip-arrow::before {
        border-top-color: var(--admin-primary);
    }
</style>

<div class="admin-header">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h1 class="admin-gradient-heading">
                    <i class="fas fa-user-shield me-2"></i>Dashboard Admin
                </h1>
                <p class="text-light">Gestione completa degli utenti della piattaforma</p>
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-light" id="refreshData">
                    <i class="fas fa-sync-alt me-2"></i>Aggiorna dati
                </button>
            </div>
        </div>
    </div>
</div>

<div class="container mb-5">
    <!-- Statistiche -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="stats-card stats-users">
                <div class="stats-value">@Model.TotalUsers</div>
                <div class="stats-label">Utenti totali</div>
                <i class="fas fa-users stats-icon"></i>
            </div>
        </div>
        <div class="col-md-4">
            <div class="stats-card stats-premium">
                <div class="stats-value">@Model.PremiumUsers</div>
                <div class="stats-label">Utenti premium</div>
                <i class="fas fa-crown stats-icon"></i>
            </div>
        </div>
        <div class="col-md-4">
            <div class="stats-card stats-posts">
                <div class="stats-value">@Model.TotalPosts</div>
                <div class="stats-label">Post creati</div>
                <i class="far fa-file-alt stats-icon"></i>
            </div>
        </div>
    </div>

    <!-- Filtri di ricerca -->
    <div class="search-filters">
        <form id="searchForm" class="row g-3 align-items-end">
            <div class="col-md-3">
                <label for="searchQuery" class="form-label">Ricerca</label>
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control" id="searchQuery" placeholder="Nome, email, utente...">
                </div>
            </div>
            <div class="col-md-3">
                <label for="roleFilter" class="form-label">Ruolo</label>
                <select id="roleFilter" class="form-select">
                    <option value="">Tutti i ruoli</option>
                    <option value="Admin">Admin</option>
                    <option value="Premium">Premium</option>
                    <option value="Base">Base</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="statusFilter" class="form-label">Stato</label>
                <select id="statusFilter" class="form-select">
                    <option value="">Tutti</option>
                    <option value="active">Attivi</option>
                    <option value="inactive">Inattivi</option>
                </select>
            </div>
            <div class="col-md-3 d-flex">
                <button type="button" id="searchButton" class="btn btn-admin-primary me-2 flex-grow-1">
                    <i class="fas fa-filter me-2"></i>Filtra
                </button>
                <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addUserModal">
                    <i class="fas fa-user-plus"></i>
                </button>
            </div>
        </form>
    </div>

    <!-- Tabella utenti -->
    <div class="user-table-container">
        <div class="table-responsive">
            <table class="admin-table" id="usersTable">
                <thead>
                    <tr>
                        <th>Utente</th>
                        <th>Email</th>
                        <th>Ruolo</th>
                        <th>Stato</th>
                        <th>Data registrazione</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model.Users)
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="avatar me-3" style="background-color: @GetRandomColor(user.UserName)">
                                        @user.UserName.Substring(0, 1).ToUpper()
                                    </div>
                                    <div>
                                        <div class="fw-bold">@user.UserName</div>
                                        <div class="small text-muted">ID: @user.Id.Substring(0, 8)...</div>
                                    </div>
                                </div>
                            </td>
                            <td>@user.Email</td>
                            <td>
                                @{
                                    var userRoles = await Model.GetUserRoles(user);
                                    var primaryRole = userRoles.FirstOrDefault() ?? "User";
                                    var roleClass = primaryRole.ToLower() == "admin" ? "role-admin" :
                                    primaryRole.ToLower() == "premium" ? "role-premium" : "role-user";
                                }
                                <span class="user-role @roleClass">@primaryRole</span>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <span class="user-status @(user.EmailConfirmed ? "status-active" : "status-inactive")"></span>
                                    @(user.EmailConfirmed ? "Attivo" : "Inattivo")
                                </div>
                            </td>
                            <td>
                                @{
                                    // Supponiamo che ci sia una proprietà CreatedAt o utilizziamo una data di fallback
                                    var createdDate = DateTime.UtcNow.AddDays(-new Random().Next(1, 365));
                                }
                                @createdDate.ToString("dd/MM/yyyy")
                            </td>
                            <td>
                                <button type="button" class="btn btn-primary btn-action" data-bs-toggle="tooltip"
                                        data-bs-title="Modifica" onclick="editUser('@user.Id', '@user.UserName', '@user.Email')">
                                    <i class="fas fa-edit"></i>
                                </button>

                                <button type="button" class="btn btn-info btn-action" data-bs-toggle="tooltip"
                                        data-bs-title="Dettagli" onclick="viewUserDetails('@user.Id')">
                                    <i class="fas fa-info"></i>
                                </button>

                                <button type="button" class="btn btn-danger btn-action" data-bs-toggle="tooltip"
                                        data-bs-title="Elimina" onclick="confirmDeleteUser('@user.Id', '@user.UserName')">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            @if (!Model.Users.Any())
            {
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="far fa-user-circle"></i>
                    </div>
                    <h4>Nessun utente trovato</h4>
                    <p class="text-muted">Prova a cambiare i criteri di ricerca o aggiungi un nuovo utente</p>
                </div>
            }
        </div>
    </div>

    <!-- Paginazione -->
    <div class="d-flex justify-content-between align-items-center mt-4">
        <div class="showing-entries">
            Visualizzazione <span class="fw-bold">@(Model.CurrentPage * Model.PageSize - Model.PageSize + 1)-@Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalUsers)</span> di <span class="fw-bold">@Model.TotalUsers</span> utenti
        </div>

        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="?page=@(Model.CurrentPage - 1)" aria-label="Previous">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>

                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="?page=@i">@i</a>
                    </li>
                }

                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" href="?page=@(Model.CurrentPage + 1)" aria-label="Next">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
</div>

<!-- Modal per aggiungere nuovo utente -->
<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUserModalLabel">
                    <i class="fas fa-user-plus me-2"></i>Aggiungi nuovo utente
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addUserForm">
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>Una password temporanea verrà generata e inviata all'utente.
                    </div>
                    <div class="mb-3">
                        <label for="newUsername" class="form-label">Nome utente</label>
                        <input type="text" class="form-control" id="newUsername" required>
                    </div>
                    <div class="mb-3">
                        <label for="newEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="newEmail" required>
                    </div>
                    <div class="mb-3">
                        <label for="newRole" class="form-label">Ruolo</label>
                        <select class="form-select" id="newRole" required>
                            <option value="User">User</option>
                            <option value="Premium">Premium</option>
                            <option value="Admin">Admin</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Annulla</button>
                    <button type="submit" class="btn btn-admin-primary">
                        <i class="fas fa-user-plus me-2"></i>Crea utente
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal per modificare utente -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">
                    <i class="fas fa-user-edit me-2"></i>Modifica utente
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editUserForm">
                <div class="modal-body">
                    <input type="hidden" id="editUserId">
                    <div class="mb-3">
                        <label for="editUsername" class="form-label">Nome utente</label>
                        <input type="text" class="form-control" id="editUsername" required>
                    </div>
                    <div class="mb-3">
                        <label for="editEmail" class="form-label">Email</label>
                        <input type="email" class="form-control" id="editEmail" required>
                    </div>
                    <div class="mb-3">
                        <label for="editRole" class="form-label">Ruolo</label>
                        <select class="form-select" id="editRole" required>
                            <option value="User">User</option>
                            <option value="Premium">Premium</option>
                            <option value="Admin">Admin</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" role="switch" id="editStatus" checked>
                            <label class="form-check-label" for="editStatus">Account attivo</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <button type="button" class="btn btn-outline-secondary btn-sm" id="resetPasswordBtn">
                            <i class="fas fa-key me-1"></i>Reimposta password
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Annulla</button>
                    <button type="submit" class="btn btn-admin-primary">
                        <i class="fas fa-save me-2"></i>Salva modifiche
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal per dettagli utente -->
<div class="modal fade" id="userDetailsModal" tabindex="-1" aria-labelledby="userDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userDetailsModalLabel">
                    <i class="fas fa-user-circle me-2"></i>Dettagli utente
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-4">
                    <div id="userAvatar" class="avatar mx-auto mb-3" style="width: 80px; height: 80px; font-size: 2rem;"></div>
                    <h4 id="detailsUserName"></h4>
                    <span id="detailsUserRole" class="user-role"></span>
                </div>

                <ul class="list-group list-group-flush">
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>Email</span>
                        <span id="detailsEmail" class="fw-bold"></span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>Stato</span>
                        <span id="detailsStatus" class="fw-bold"></span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>Data registrazione</span>
                        <span id="detailsCreated" class="fw-bold"></span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>Ultimo accesso</span>
                        <span id="detailsLastLogin" class="fw-bold"></span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>Post creati</span>
                        <span id="detailsPosts" class="fw-bold"></span>
                    </li>
                </ul>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Chiudi</button>
                <button type="button" class="btn btn-primary" id="editUserBtn">
                    <i class="fas fa-edit me-2"></i>Modifica utente
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal per conferma eliminazione -->
<div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteUserModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>Conferma eliminazione
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Sei sicuro di voler eliminare l'utente <span id="deleteUserName" class="fw-bold"></span>?</p>
                <p class="text-danger mb-0">Questa azione è irreversibile e comporterà l'eliminazione di tutti i dati associati a questo utente.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Annulla</button>
                <form id="deleteUserForm">
                    <input type="hidden" id="deleteUserId">
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash-alt me-2"></i>Elimina utente
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Toast per notifiche -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="liveToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header" id="toastHeader">
            <i class="fas fa-check-circle me-2" id="toastIcon"></i>
            <strong class="me-auto" id="toastTitle">Notifica</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastBody">
            Operazione completata con successo.
        </div>
    </div>
</div>

<style>
    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #e9ecef;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }
</style>

@section Scripts {
    <script>
        // Funzione per ottenere un colore casuale ma coerente in base al nome utente
        function stringToColor(str) {
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }

            const colors = [
                '#4361ee', '#3a0ca3', '#7209b7', '#f72585', '#4cc9f0',
                '#4895ef', '#560bad', '#480ca8', '#3f37c9', '#b5179e'
            ];

            return colors[Math.abs(hash) % colors.length];
        }

        // Funzione per mostrare il toast con messaggi personalizzati
        function showToast(title, message, type = 'success') {
            // Imposta stile in base al tipo
            let headerClass, iconClass;

            switch(type) {
                case 'success':
                    headerClass = 'toast-header bg-success text-white';
                    iconClass = 'fas fa-check-circle me-2';
                    break;
                case 'error':
                    headerClass = 'toast-header bg-danger text-white';
                    iconClass = 'fas fa-exclamation-circle me-2';
                    break;
                case 'info':
                    headerClass = 'toast-header bg-info text-white';
                    iconClass = 'fas fa-info-circle me-2';
                    break;
                case 'warning':
                    headerClass = 'toast-header bg-warning text-white';
                    iconClass = 'fas fa-exclamation-triangle me-2';
                    break;
                default:
                    headerClass = 'toast-header bg-primary text-white';
                    iconClass = 'fas fa-info-circle me-2';
            }

            // Imposta valori
            document.getElementById('toastHeader').className = headerClass;
            document.getElementById('toastIcon').className = iconClass;
            document.getElementById('toastTitle').textContent = title;
            document.getElementById('toastBody').textContent = message;

            // Mostra toast
            window.toast.show();
        }

        // Funzione per inviare una richiesta AJAX con gestione token antiforgery
        async function sendAjaxRequest(handler, data) {
            try {
                // Ottieni il token anti-forgery
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                // Esegui la richiesta AJAX
                const response = await fetch(`?handler=${handler}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(data)
                });

                // Verifica se la risposta è ok (status 200-299)
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Errore HTTP ${response.status}: ${errorText}`);
                }

                return await response.json();
            } catch (error) {
                console.error('Errore AJAX:', error);
                showToast('Errore', error.message, 'error');
                throw error;
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Inizializzazione tooltip
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));

            // Impostazione colori avatar
            document.querySelectorAll('.avatar').forEach(avatar => {
                if (avatar.style.backgroundColor === 'var(--random-color)') {
                    const username = avatar.parentElement.querySelector('.fw-bold').textContent;
                    avatar.style.backgroundColor = stringToColor(username);
                }
            });

            // Inizializzazione toast
            const toastLiveExample = document.getElementById('liveToast');
            window.toast = new bootstrap.Toast(toastLiveExample);

            // Gestione aggiunta utente
            document.getElementById('addUserForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const username = document.getElementById('newUsername').value;
                const email = document.getElementById('newEmail').value;
                const role = document.getElementById('newRole').value;

                try {
                    // Invia richiesta AJAX per aggiungere l'utente
                    const result = await sendAjaxRequest('AddUser', {
                        username,
                        email,
                        role
                    });

                    if (result.success) {
                        // Mostra la password temporanea se disponibile
                        let successMsg = `L'utente ${username} è stato aggiunto con successo.`;
                        if (result.temporaryPassword) {
                            successMsg += `\nPassword temporanea: ${result.temporaryPassword}`;
                            alert(`Password temporanea per ${username}: ${result.temporaryPassword}\nConservala in un luogo sicuro!`);
                        }

                        showToast('Utente aggiunto', successMsg, 'success');

                        // Chiudi il modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));
                        modal.hide();

                        // Ricaricare la pagina dopo un breve ritardo
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        showToast('Errore', result.message || 'Errore durante la creazione dell\'utente', 'error');
                    }
                } catch (error) {
                    console.error('Errore durante l\'aggiunta dell\'utente:', error);
                }
            });

            // Gestione modifica utente
            document.getElementById('editUserForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const id = document.getElementById('editUserId').value;
                const username = document.getElementById('editUsername').value;
                const email = document.getElementById('editEmail').value;
                const role = document.getElementById('editRole').value;
                const isActive = document.getElementById('editStatus').checked;

                try {
                    // Invia richiesta AJAX per modificare l'utente
                    const result = await sendAjaxRequest('EditUser', {
                        id,
                        username,
                        email,
                        role,
                        isActive
                    });

                    if (result.success) {
                        showToast('Utente modificato', `L'utente ${username} è stato modificato con successo.`, 'success');

                        // Chiudi il modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));
                        modal.hide();

                        // Ricaricare la pagina dopo un breve ritardo
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        showToast('Errore', result.message || 'Errore durante la modifica dell\'utente', 'error');
                    }
                } catch (error) {
                    console.error('Errore durante la modifica dell\'utente:', error);
                }
            });

            // Gestione eliminazione utente
            document.getElementById('deleteUserForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const id = document.getElementById('deleteUserId').value;
                const username = document.getElementById('deleteUserName').textContent;

                try {
                    // Invia richiesta AJAX per eliminare l'utente
                    const result = await sendAjaxRequest('DeleteUser', { id });

                    if (result.success) {
                        showToast('Utente eliminato', `L'utente ${username} è stato eliminato con successo.`, 'success');

                        // Chiudi il modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('deleteUserModal'));
                        modal.hide();

                        // Ricaricare la pagina dopo un breve ritardo
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        showToast('Errore', result.message || 'Errore durante l\'eliminazione dell\'utente', 'error');
                    }
                } catch (error) {
                    console.error('Errore durante l\'eliminazione dell\'utente:', error);
                }
            });

            // Reset password button
            document.getElementById('resetPasswordBtn').addEventListener('click', async function() {
                const userId = document.getElementById('editUserId').value;
                const username = document.getElementById('editUsername').value;

                if (confirm(`Sei sicuro di voler reimpostare la password per l'utente ${username}?`)) {
                    try {
                        // Invia richiesta AJAX per reimpostare la password
                        const result = await sendAjaxRequest('ResetPassword', { id: userId });

                        if (result.success) {
                            if (result.temporaryPassword) {
                                alert(`Password temporanea per ${username}: ${result.temporaryPassword}\nConservala in un luogo sicuro!`);
                            }

                            showToast('Password reimpostata', 'La password è stata reimpostata con successo.', 'success');
                        } else {
                            showToast('Errore', result.message || 'Errore durante il reset della password', 'error');
                        }
                    } catch (error) {
                        console.error('Errore durante il reset della password:', error);
                    }
                }
            });

            // Aggiornamento dati
            document.getElementById('refreshData').addEventListener('click', function() {
                window.location.reload();
            });

            // Filtri di ricerca
            document.getElementById('searchButton').addEventListener('click', function() {
                const query = document.getElementById('searchQuery').value;
                const role = document.getElementById('roleFilter').value;
                const status = document.getElementById('statusFilter').value;

                // Costruisci URL con i parametri di ricerca
                let url = window.location.pathname + '?';
                if (query) url += `q=${encodeURIComponent(query)}&`;
                if (role) url += `role=${encodeURIComponent(role)}&`;
                if (status) url += `status=${encodeURIComponent(status)}&`;

                window.location.href = url;
            });
        });

        // Funzioni per i pulsanti delle azioni
        function editUser(id, username, email) {
            document.getElementById('editUserId').value = id;
            document.getElementById('editUsername').value = username;
            document.getElementById('editEmail').value = email;

            // Qui potresti fare una chiamata AJAX per ottenere più dettagli sull'utente

            const editModal = new bootstrap.Modal(document.getElementById('editUserModal'));
            editModal.show();
        }

        function viewUserDetails(id) {
            // Simuliamo il caricamento dei dettagli (in un'app reale faresti una chiamata AJAX)
            const userRow = document.querySelector(`tr[data-user-id="${id}"]`) ||
                            Array.from(document.querySelectorAll('tr')).find(tr => tr.textContent.includes(id));

            if (userRow) {
                const username = userRow.querySelector('.fw-bold').textContent;
                const email = userRow.cells[1].textContent;
                const role = userRow.querySelector('.user-role').textContent;
                const isActive = userRow.querySelector('.user-status').classList.contains('status-active');

                // Imposta i valori nel modal
                document.getElementById('detailsUserName').textContent = username;
                document.getElementById('detailsEmail').textContent = email;
                document.getElementById('detailsStatus').textContent = isActive ? 'Attivo' : 'Inattivo';
                document.getElementById('detailsCreated').textContent = '01/01/2023'; // Esempio
                document.getElementById('detailsLastLogin').textContent = '15/05/2023'; // Esempio
                document.getElementById('detailsPosts').textContent = Math.floor(Math.random() * 50); // Esempio

                // Imposta il colore dell'avatar e la classe del ruolo
                const avatar = document.getElementById('userAvatar');
                avatar.style.backgroundColor = stringToColor(username);
                avatar.textContent = username.substring(0, 1).toUpperCase();

                const roleSpan = document.getElementById('detailsUserRole');
                roleSpan.textContent = role;
                roleSpan.className = 'user-role';
                if (role.toLowerCase() === 'admin')
                    roleSpan.classList.add('role-admin');
                else if (role.toLowerCase() === 'premium')
                    roleSpan.classList.add('role-premium');
                else
                    roleSpan.classList.add('role-user');

                // Aggiungi event listener al pulsante "Modifica"
                document.getElementById('editUserBtn').onclick = function() {
                    // Chiudi modal dettagli
                    const detailsModal = bootstrap.Modal.getInstance(document.getElementById('userDetailsModal'));
                    detailsModal.hide();

                    // Apri modal modifica
                    setTimeout(() => {
                        editUser(id, username, email);
                    }, 500);
                };
            }

            const detailsModal = new bootstrap.Modal(document.getElementById('userDetailsModal'));
            detailsModal.show();
        }

        function confirmDeleteUser(id, username) {
            document.getElementById('deleteUserId').value = id;
            document.getElementById('deleteUserName').textContent = username;

            const deleteModal = new bootstrap.Modal(document.getElementById('deleteUserModal'));
            deleteModal.show();
        }
    </script>
    <script>
        // Funzione per mostrare il toast con messaggi personalizzati
        function showToast(title, message, type = 'success') {
            // Imposta stile in base al tipo
            let headerClass, iconClass;

            switch(type) {
                case 'success':
                    headerClass = 'toast-header bg-success text-white';
                    iconClass = 'fas fa-check-circle me-2';
                    break;
                case 'error':
                    headerClass = 'toast-header bg-danger text-white';
                    iconClass = 'fas fa-exclamation-circle me-2';
                    break;
                case 'info':
                    headerClass = 'toast-header bg-info text-white';
                    iconClass = 'fas fa-info-circle me-2';
                    break;
                case 'warning':
                    headerClass = 'toast-header bg-warning text-white';
                    iconClass = 'fas fa-exclamation-triangle me-2';
                    break;
                default:
                    headerClass = 'toast-header bg-primary text-white';
                    iconClass = 'fas fa-info-circle me-2';
            }

            // Imposta valori
            document.getElementById('toastHeader').className = headerClass;
            document.getElementById('toastIcon').className = iconClass;
            document.getElementById('toastTitle').textContent = title;

            // Formatta meglio i messaggi di errore se sono un array
            if (typeof message === 'object' && Array.isArray(message)) {
                document.getElementById('toastBody').innerHTML = message.join('<br>');
            } else {
                document.getElementById('toastBody').textContent = message;
            }

            // Mostra toast
            window.toast.show();

            // Se è un errore, logga in console per debug
            if (type === 'error') {
                console.error(message);
            }
        }

        // Funzione per inviare una richiesta AJAX con gestione token antiforgery
        async function sendAjaxRequest(handler, data) {
            try {
                // Ottieni il token anti-forgery
                const token = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]').value;

                console.log(`Invio richiesta a handler: ${handler}`, data);

                // Esegui la richiesta AJAX
                const response = await fetch(`?handler=${handler}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(data)
                });

                // Verifica se la risposta è ok (status 200-299)
                if (!response.ok) {
                    throw new Error(`Errore HTTP ${response.status}: ${await response.text()}`);
                }

                const jsonResult = await response.json();
                console.log(`Risposta da ${handler}:`, jsonResult);

                // Se c'è un messaggio di warning, lo mostriamo anche se l'operazione è riuscita
                if (jsonResult.warning) {
                    showToast('Attenzione', jsonResult.warning, 'warning');
                }

                // Se ci sono errori specifici, li mostriamo
                if (!jsonResult.success && jsonResult.errors) {
                    showToast('Errore', jsonResult.errors, 'error');
                }

                return jsonResult;
            } catch (error) {
                console.error('Errore nella richiesta AJAX:', error);
                showToast('Errore', error.message, 'error');
                throw error;
            }
        }

        // Gestione aggiunta utente
        document.getElementById('addUserForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const username = document.getElementById('newUsername').value;
            const email = document.getElementById('newEmail').value;
            const role = document.getElementById('newRole').value;

            try {
                // Validazione lato client
                if (!username || !email || !role) {
                    showToast('Errore', 'Tutti i campi sono obbligatori', 'error');
                    return;
                }

                // Invia richiesta AJAX per aggiungere l'utente
                const result = await sendAjaxRequest('AddUser', {
                    username,
                    email,
                    role
                });

                if (result.success) {
                    // Mostra la password temporanea in un modale più sicuro
                    let successMsg = `L'utente ${username} è stato aggiunto con successo.`;

                    showToast('Utente aggiunto', successMsg, 'success');

                    if (result.temporaryPassword) {
                        // Mostra la password in un alert
                        setTimeout(() => {
                            alert(`Password temporanea per ${username}: ${result.temporaryPassword}\n\nCopia questa password in un luogo sicuro, non sarà più visualizzabile!`);
                        }, 500);
                    }

                    // Chiudi il modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));
                    modal.hide();

                    // Reset del form
                    document.getElementById('addUserForm').reset();

                    // Ricaricare la pagina dopo un breve ritardo
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showToast('Errore', result.message || 'Errore durante la creazione dell\'utente', 'error');
                }
            } catch (error) {
                console.error('Errore durante l\'aggiunta dell\'utente:', error);
                showToast('Errore', 'Si è verificato un errore durante l\'operazione', 'error');
            }
        });
    </script>
}

@functions {
    string GetRandomColor(string input)
    {
        // Semplice funzione per generare un colore in base al nome utente
        var colors = new[] {
            "#4361ee", "#3a0ca3", "#7209b7", "#f72585", "#4cc9f0",
            "#4895ef", "#560bad", "#480ca8", "#3f37c9", "#b5179e"
        };

        int hash = 0;
        foreach (char c in input)
        {
            hash = (hash * 31) + c;
        }

        return colors[Math.Abs(hash % colors.Length)];
    }
}
